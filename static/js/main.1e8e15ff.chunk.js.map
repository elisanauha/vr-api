{"version":3,"sources":["components/HeaderPanel.js","components/SearchField.js","components/SearchPanel.js","components/TrainRows.js","components/TrainTable.js","components/TrainTabs.js","App.js","serviceWorker.js","index.js"],"names":["HeaderPanel","react_default","a","createElement","className","Component","SearchField","onChange","this","props","onSearchChange","type","name","value","searchTerm","SearchPanel","components_SearchField","stationFull","TrainRows","evenclass","i","train","stopType","arrivingTab","trainInfo","trainCategory","commuterLineID","trainType","trainNumber","times","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","timeTableRows","Symbol","iterator","next","done","row","stationShortCode","station","differenceInMinutes","liveEstimateTime","push","key","slice","scheduledTime","err","return","cancelled","departureStationCode","arrivalStationCode","length","departureStation","arrivalStation","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","stations","stationName","endsWith","substr","TrainTable","timeColumn","trainrows","trains","components_TrainRows","TrainTabs","arrivingTabActivity","departingTabActivity","id","onClick","onTabChange","components_TrainTable","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","arriving","handleSearch","bind","assertThisInitialized","handleTabChange","_this2","fetch","then","response","json","data","filteredData","passengerTraffic","setState","search","newtrains","sortTrains","catch","error","console","event","_this3","newsearchterm","target","matchingStation","matchingStationFull","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","log","toLowerCase","startsWith","newstate","filteredTrains","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","JSON","parse","stringify","components_HeaderPanel","components_SearchPanel","components_TrainTabs","currentStation","getScheduledTime","departingOrArriving","time","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","sort","b","timea","timeb","Date","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e8e15ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass HeaderPanel extends Component {\n   render() {\n      return (\n         <div className=\"HeaderPanel\">\n            <h1>Aseman junatiedot</h1>\n         </div>\n      );\n   }\n}\n\nexport default HeaderPanel;\n","import React, { Component } from \"react\";\n\nclass SearchField extends Component {\n   render() {\n      return (\n         <div className=\"SearchField\">\n            <input\n               onChange={this.props.onSearchChange}\n               type=\"text\"\n               name=\"citysearch\"\n               value={this.props.searchTerm}\n            />\n         </div>\n      );\n   }\n}\n\nexport default SearchField;\n","import React, { Component } from \"react\";\n\nimport SearchField from \"./SearchField\";\n\nclass SearchPanel extends Component {\n   render() {\n      return (\n         <div className=\"SearchPanel\">\n            <label>Hae aseman nimellä</label>\n            <SearchField\n               onSearchChange={this.props.onSearchChange}\n               searchTerm={this.props.searchTerm}\n            />\n            <p>{this.props.stationFull}</p>\n         </div>\n      );\n   }\n}\n\nexport default SearchPanel;\n","import React, { Component } from \"react\";\n\nclass TrainRows extends Component {\n   render() {\n      // set the class fort he rows so every other is in grey\n      let evenclass = \"OddRow\";\n      if (this.props.i % 2 === 0) {\n         evenclass = \"EvenRow\";\n      }\n\n      let train = this.props.train; // less writing\n\n      // Checking if departure or arrival times are wanted ie. \"ARRIVAL\" or \"DEPARTURE\"\n      let stopType = \"\";\n      if (this.props.arrivingTab) stopType = \"ARRIVAL\";\n      else stopType = \"DEPARTURE\";\n\n      // if it is a commuter train (trainCategory: \"Commuter\") then we want \"Commuter train\" and the line commuterLineID: \"A\"\n      // else for long distance trains the train type and number\n      let trainInfo = \"\";\n      if (train.trainCategory === \"Commuter\") {\n         trainInfo = \"Commuter train \" + train.commuterLineID;\n      } else {\n         trainInfo = train.trainType + \" \" + train.trainNumber;\n      }\n\n      // times first wants the expected time if train is late (in red),\n      // then the scheduled time (smaller and in parenthesis if late),\n      // and possibly \"Cancelled\" (in red). And if cancelled the whole row should be with grey text\n      // Times in data as \"2019-03-23T18:50:00.000Z\"\n      let times = [];\n      for (let row of train.timeTableRows) {\n         if (\n            row.type === stopType &&\n            row.stationShortCode === this.props.station\n         ) {\n            if (row.differenceInMinutes > 0 && row.liveEstimateTime) {\n               // instead of liveEstimateTime it might also be actualTime after train has left\n               times.push(\n                  <p className=\"lateOrCancelled\" key=\"estimate\">\n                     {row.liveEstimateTime.slice(11, 16)}\n                  </p>\n               );\n               times.push(\n                  <span className=\"late\" key=\"scheduledlate\">\n                     ({row.scheduledTime.slice(11, 16)})\n                  </span>\n               );\n            } else {\n               times.push(\n                  <span key=\"scheduled\">{row.scheduledTime.slice(11, 16)}</span>\n               );\n            }\n         }\n      }\n      if (train.cancelled) {\n         times.push(\n            <p className=\"lateOrCancelled\" key=\"cancelled\">\n               Cancelled\n            </p>\n         );\n         evenclass = evenclass + \"C\";\n      }\n\n      // Get the station codes for the departure and arrival stations and then\n      // find the names of the stations in the stations data for the table\n      let departureStationCode = train.timeTableRows[0].stationShortCode;\n      let arrivalStationCode =\n         train.timeTableRows[train.timeTableRows.length - 1].stationShortCode;\n      let departureStation = \"\";\n      let arrivalStation = \"\";\n      for (let station of this.props.stations) {\n         if (station.stationShortCode === departureStationCode)\n            departureStation = station.stationName;\n         if (station.stationShortCode === arrivalStationCode)\n            arrivalStation = station.stationName;\n      }\n      // getting rid of the \"asema\" in some station names\n      if (departureStation.endsWith(\"asema\"))\n         departureStation = departureStation.substr(\n            0,\n            departureStation.length - 5\n         );\n      if (arrivalStation.endsWith(\"asema\"))\n         arrivalStation = arrivalStation.substr(0, arrivalStation.length - 5);\n\n      return (\n         <tr className={evenclass} key={this.props.i}>\n            <td>{trainInfo}</td>\n            <td>{departureStation}</td>\n            <td>{arrivalStation}</td>\n            <td>{times}</td>\n         </tr>\n      );\n   }\n}\n\nexport default TrainRows;\n","import React, { Component } from \"react\";\nimport TrainRows from \"./TrainRows\";\n\nclass TrainTable extends Component {\n   render() {\n      // Checking if departure or arrival column is wanted\n      // Trains also have to be sorted by arrival or departure time\n      let timeColumn = \"\";\n      if (this.props.arrivingTab) {\n         timeColumn = \"Saapuu\";\n      } else {\n         timeColumn = \"Lähtee\";\n      }\n\n      // Go through the trains and make a row for each.\n      let trainrows = [];\n      let i = 1; // keep track of even or odd\n\n      for (let train of this.props.trains) {\n         // If departures are wanted, but the trains final destination is the current station then the row is not wanted\n         // If arrivals are wanted but the first station is the station wanted then row is not wanted\n         // ie. no one cares when the train comes or goes from \"storage\"\n         if (\n            (this.props.arrivingTab && // is arriving\n               train.timeTableRows[0].stationShortCode ===\n                  this.props.station) || // station is first station\n            (!this.props.arrivingTab && // is departing\n               train.timeTableRows[train.timeTableRows.length - 1]\n                  .stationShortCode === this.props.station) // station is final station\n         );\n         else {\n            trainrows.push(\n               <TrainRows\n                  train={train}\n                  i={i}\n                  station={this.props.station}\n                  stations={this.props.stations}\n                  arrivingTab={this.props.arrivingTab}\n                  key={i}\n               />\n            );\n            i++;\n         }\n      }\n\n      return (\n         <div className=\"TrainTable\">\n            <table>\n               <tbody>\n                  <tr className=\"HeaderRow\">\n                     <th>Juna</th>\n                     <th>Lähtöasema</th>\n                     <th>Pääteasema</th>\n                     <th>{timeColumn}</th>\n                  </tr>\n                  {trainrows}\n               </tbody>\n            </table>\n         </div>\n      );\n   }\n}\n\nexport default TrainTable;\n","import React, { Component } from \"react\";\nimport TrainTable from \"./TrainTable\";\n\nclass TrainTabs extends Component {\n   render() {\n      // A check on which we want active\n      let arrivingTabActivity = \"inactive\";\n      let departingTabActivity = \"active\";\n      if (this.props.arrivingTab) {\n         arrivingTabActivity = \"active\";\n         departingTabActivity = \"inactive\";\n      }\n\n      return (\n         <div className=\"TrainTabs\">\n            <div className=\"tab\">\n               <button\n                  className={arrivingTabActivity}\n                  id=\"arriving\"\n                  onClick={this.props.onTabChange}\n               >\n                  Saapuvat\n               </button>\n               <button\n                  className={departingTabActivity}\n                  id=\"leaving\"\n                  onClick={this.props.onTabChange}\n               >\n                  Lähtevät\n               </button>\n            </div>\n\n            <TrainTable\n               trains={this.props.trains}\n               station={this.props.station}\n               arrivingTab={this.props.arrivingTab}\n               stations={this.props.stations}\n            />\n         </div>\n      );\n   }\n}\n\nexport default TrainTabs;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport HeaderPanel from \"./components/HeaderPanel\";\nimport SearchPanel from \"./components/SearchPanel\";\nimport TrainTabs from \"./components/TrainTabs\";\n\nclass App extends Component {\n   constructor(props) {\n      super(props);\n\n      this.state = {\n         stations: null,\n         searchTerm: \"Tampere\",\n         station: \"TPE\",\n         stationFull: \"Tampere asema\",\n         arriving: true,\n         trains: []\n      };\n\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleTabChange = this.handleTabChange.bind(this);\n   }\n\n   /**\n    * Fetching the station data only when the app mounts as it is likely not going to change\n    * Fetching original data for a station (Tampere)\n    */\n   componentDidMount() {\n      // Need to get the station data for searching to get stationShortCode\n      fetch(\"https://rata.digitraffic.fi/api/v1/metadata/stations\")\n         .then(response => response.json())\n         .then(data => {\n            // Filtering out stations that do not have passanger traffic as expected\n            // to only want data on passanger trains\n            let filteredData = [];\n            for (let station of data) {\n               if (station.passengerTraffic) {\n                  filteredData.push(station);\n               }\n            }\n\n            this.setState({ stations: filteredData });\n            //console.log(filteredData);\n         });\n\n      // Fetching data for Tampere (default in state) as example\n      let search =\n         \"https://rata.digitraffic.fi/api/v1/live-trains/station/\" +\n         this.state.station +\n         \"?minutes_before_departure=400\" +\n         \"&minutes_after_departure=0\" +\n         \"&minutes_before_arrival=400\" +\n         \"&minutes_after_arrival=0\";\n      fetch(search)\n         .then(response => response.json())\n         .then(data => {\n            // filter by trainCategory - we want \"Long-distance\" and \"Commuter\", not \"Cargo\" etc.\n            let filteredData = [];\n            for (let train of data) {\n               if (\n                  train.trainCategory === \"Long-distance\" ||\n                  train.trainCategory === \"Commuter\"\n               ) {\n                  filteredData.push(train);\n               }\n            }\n            // Now the trains have to be sorted\n            let newtrains = sortTrains(\n               filteredData,\n               this.state.station,\n               this.state.arriving\n            );\n            this.setState({ trains: newtrains });\n         })\n         .catch(error => console.error(\"Error:\", error));\n   }\n\n   /**\n    * When something is written in the search field the citysearch in state is changed.\n    * Then a search is made in the stations to find the first station that starts with the searchTerm.\n    * The timetable of this city is fetched from the digitraffic API and put on the screen.\n    * @param {input onChange} event\n    */\n   handleSearch(event) {\n      let newsearchterm = event.target.value;\n\n      // Searching through the stations to get first station starting with the searchTerm text\n      let matchingStation = this.state.station;\n      let matchingStationFull = this.state.stationFull;\n      for (let station of this.state.stations) {\n         console.log(station.stationName);\n         if (\n            station.stationName\n               .toLowerCase()\n               .startsWith(newsearchterm.toLowerCase())\n         ) {\n            matchingStation = station.stationShortCode;\n            matchingStationFull = station.stationName;\n            break;\n         }\n      }\n      // Setting the new state with searchTerm and station to display\n      let newstate = {\n         searchTerm: newsearchterm,\n         station: matchingStation,\n         stationFull: matchingStationFull\n      };\n\n      // Now fetching the trains for the matchingStation if station has actually changed\n      // TODO: The minutes before and after arrival or departure could be set with some logic (now 8 hours)\n      if (matchingStation !== this.state.station) {\n         let search =\n            \"https://rata.digitraffic.fi/api/v1/live-trains/station/\" +\n            matchingStation +\n            \"?minutes_before_departure=480\" +\n            \"&minutes_after_departure=0\" +\n            \"&minutes_before_arrival=480\" +\n            \"&minutes_after_arrival=0\";\n         fetch(search)\n            .then(response => response.json())\n            .then(data => {\n               // filter by trainCategory - we want \"Long-distance\" and \"Commuter\", not \"Cargo\" etc.\n               let filteredTrains = [];\n               for (let train of data) {\n                  if (\n                     train.trainCategory === \"Long-distance\" ||\n                     train.trainCategory === \"Commuter\"\n                  ) {\n                     // TODO: Would be nice to filter out all the extra stations in timeTableRows\n                     // as only need the ones for the current station !and the first and last!\n                     // train.timeTableRows = train.timeTableRows.filter(\n                     //    row => row.stationShortCode === this.state.station\n                     // );\n                     filteredTrains.push(train);\n                  }\n               }\n               // Now the trains have to be sorted\n               let newtrains = sortTrains(\n                  filteredTrains,\n                  matchingStation,\n                  this.state.arriving\n               );\n               //console.log(filteredData);\n               this.setState({ trains: newtrains });\n            })\n            .catch(error => console.error(\"Error:\", error));\n      }\n\n      this.setState(newstate);\n   }\n\n   /**\n    * When clicking on the tabs the state indicating if arriving or departing trains are wanted is changed\n    * and the trains have to be sorted according to arrival or departure time\n    * @param {button onClick} event\n    */\n   handleTabChange(event) {\n      console.log(event.target.id);\n      let arriving = false;\n      if (event.target.id === \"arriving\") {\n         arriving = true;\n      }\n\n      // Trains also have to be sorted by arrival or departure time\n      // make a copy of the trains, sort and put in state\n      let newtrains = JSON.parse(JSON.stringify(this.state.trains));\n      newtrains = sortTrains(newtrains, this.state.station, arriving);\n\n      this.setState({ arriving: arriving, trains: newtrains });\n   }\n\n   render() {\n      return (\n         <div className=\"App\">\n            <HeaderPanel />\n            <SearchPanel\n               onSearchChange={this.handleSearch}\n               searchTerm={this.state.searchTerm}\n               stationFull={this.state.stationFull}\n            />\n            <TrainTabs\n               arrivingTab={this.state.arriving}\n               onTabChange={this.handleTabChange}\n               trains={this.state.trains}\n               station={this.state.station}\n               stations={this.state.stations}\n            />\n         </div>\n      );\n   }\n}\n\nexport default App;\n\n/**\n * Helpers for sorting the trains according to arrival or departure from specified station when needed\n * TODO: the sorting doesn't always work properly - something to do with the dates and times and most visible\n * in helsinki with a lot of trains on the list.\n * @param {*} trains\n * @param {*} currentStation\n * @param {*} arriving\n */\nfunction sortTrains(trains, currentStation, arriving) {\n   // Comparison functions to sort trains according to arrival or departure time at specified station.\n   function dateCompareArriving(a, b) {\n      let timea = getScheduledTime(a, \"ARRIVAL\");\n      let timeb = getScheduledTime(b, \"ARRIVAL\");\n      let datea = new Date(timea);\n      let dateb = new Date(timeb);\n      return datea - dateb;\n   }\n\n   function dateCompareDeparting(a, b) {\n      let timea = getScheduledTime(a, \"DEPARTURE\");\n      let timeb = getScheduledTime(b, \"DEPARTURE\");\n      let datea = new Date(timea);\n      let dateb = new Date(timeb);\n      return datea - dateb;\n   }\n\n   function getScheduledTime(train, departingOrArriving) {\n      let time = \"\";\n      for (let row of train.timeTableRows) {\n         if (\n            row.stationShortCode === currentStation &&\n            row.type === departingOrArriving\n         ) {\n            time = row.scheduledTime;\n            break;\n         }\n      }\n      return time;\n   }\n\n   if (arriving) {\n      // sort with arriving time\n      trains.sort(dateCompareArriving);\n   } else {\n      // sort with departure time\n      trains.sort(dateCompareDeparting);\n   }\n   //console.log(trains);\n   return trains;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}